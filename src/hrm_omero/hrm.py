"""Helper functions to interact with the HRM."""

# pylint: disable-msg=consider-using-f-string
# pylint: disable-msg=import-outside-toplevel

import shlex

from loguru import logger as log


def parse_config(filename):
    """Assemble a dict from the HRM config file (shell syntax).

    Usually, the config is located at /etc/hrm.conf and written in shell syntax as
    this file simply gets sourced by the bash init script and other shell based
    tools.

    Parameters
    ----------
    filename : str
        The name of the configuration file to be parsed.

    Returns
    -------
    dict
        A dict with the parsed configuration items.

    Raises
    ------
    SyntaxError
        Raised in case the given configuration file can't be parsed correctly.

    Example
    -------
    >>> parse_config('/etc/hrm.conf')
    ... {
    ...     'HRM_DATA': '/export/hrm_data',
    ...     'HRM_DEST': 'dst',
    ...     'HRM_HOME': '/var/www/hrm',
    ...     'HRM_LOG': '/var/log/hrm',
    ...     'HRM_SOURCE': 'src',
    ...     'OMERO_HOSTNAME': 'omero.mynetwork.xy',
    ...     'OMERO_PKG': '/opt/OMERO/OMERO.server',
    ...     'OMERO_PORT': '4064',
    ...     'PHP_CLI': '/usr/local/php/bin/php',
    ...     'SUSER': 'hrm'
    ... }
    """
    log.debug("Trying to parse HRM configuration file [{}]...", filename)
    config = dict()
    with open(filename, "r") as file:
        body = file.read()

    lexer = shlex.shlex(body)
    lexer.wordchars += "-./"
    while True:
        token = lexer.get_token()
        if token is None or token == "":
            break
        # it's valid sh syntax to use a semicolon to join lines, so accept it:
        if token == ";":
            continue
        # we assume entries of the following form:
        # KEY="some-value"
        key = token
        try:
            equals = lexer.get_token()
            assert equals == "="
        except AssertionError:
            raise SyntaxError(   # pylint: disable-msg=raise-missing-from
                "Can't parse %s, invalid syntax in line %s "
                "(expected '=', found '%s')." % (filename, lexer.lineno, equals)
            )
        except Exception as err:  # pylint: disable-msg=broad-except
            log.warning("Error parsing config: {}", err)
        value = lexer.get_token()
        value = value.replace('"', "")  # remove double quotes
        value = value.replace("'", "")  # remove single quotes
        config[key] = value
    log.info("Successfully parsed [{}].", filename)
    return config


def check_config(config):
    """Check the config dict for required entries.

    Parameters
    ----------
    config : dict
        A dict with a parsed configuration, as returned by `parse_hrm_conf()`.

    Raises
    ------
    SyntaxError
        Raised in case one of the required configuration items is missing.
    """
    required = ["OMERO_PKG", "OMERO_HOSTNAME"]
    for entry in required:
        if entry not in config:
            raise SyntaxError('Missing "%s" in the HRM config file.' % entry)
    log.debug("HRM config file passed all checks.")


def job_parameter_summary(fname):
    """Generate a parameter summary from the HRM-generated HTML file.

    Parse the HTML file generated by the HRM containing the parameter summary and
    generate a plain-text version of it. The HTML file is assumed to contain three
    `<table>` items that contain a single `<tr>` column with the table title in the
    first row, the second row is ignored (column legend) and the actual parameters in
    four columns in each of the subsequent rows, e.g. something of this form:

    ```
    ___________________________________________
    |___________________title_________________|
    |_________________(ignored)_______________|
    | parameter | channel | (ignored) | value |
    ...
    | parameter | channel | (ignored) | value |
    -------------------------------------------
    ```

    Parameters
    ----------
    fname : str
        The filename of the job's HTML parameter summary.

    Returns
    -------
    str
        The formatted string containing the parameter summary.
    """
    try:
        from bs4 import BeautifulSoup
    except ImportError:
        try:
            from BeautifulSoup import BeautifulSoup
        except ImportError:
            return (
                "This file was imported via the HRM-OMERO connector. For a parameter "
                "summary, the 'BeautifulSoup' package for Python is required at import "
                "time on the HRM system."
            )
    try:
        soup = BeautifulSoup(open(fname, "r"))
    except IOError:
        return None
    summary = ""
    for table in soup.findAll("table"):
        rows = table.findAll("tr")
        # the table header:
        summary += "%s\n" % rows[0].findAll("td")[0].text
        summary += "==============================\n"
        # and the table body:
        for row in rows[2:]:
            cols = row.findAll("td")
            summary += "%s [Ch: %s]: %s\n" % (
                cols[0].text.replace("&mu;m", "um").replace(u"\u03bc", "u"),
                cols[1].text,
                cols[3].text,
            )
        summary += "\n"
    return summary
